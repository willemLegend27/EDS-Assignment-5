ARM GAS  /tmp/cceeXmIr.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.cpp"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._ZL12MX_GPIO_Initv,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	_ZL12MX_GPIO_Initv:
  26              		.fnstart
  27              	.LFB138:
  28              		.file 1 "Src/main.cpp"
   1:Src/main.cpp  **** /* USER CODE BEGIN Header */
   2:Src/main.cpp  **** /**
   3:Src/main.cpp  ****   ******************************************************************************
   4:Src/main.cpp  ****   * @file           : main.c
   5:Src/main.cpp  ****   * @brief          : Main program body
   6:Src/main.cpp  ****   ******************************************************************************
   7:Src/main.cpp  ****   * @attention
   8:Src/main.cpp  ****   *
   9:Src/main.cpp  ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/main.cpp  ****   * All rights reserved.</center></h2>
  11:Src/main.cpp  ****   *
  12:Src/main.cpp  ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Src/main.cpp  ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/main.cpp  ****   * the License. You may obtain a copy of the License at:
  15:Src/main.cpp  ****   *                             www.st.com/SLA0044
  16:Src/main.cpp  ****   *
  17:Src/main.cpp  ****   ******************************************************************************
  18:Src/main.cpp  ****   */
  19:Src/main.cpp  **** /* USER CODE END Header */
  20:Src/main.cpp  **** 
  21:Src/main.cpp  **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.cpp  **** #include "main.h"
  23:Src/main.cpp  **** #include "cmsis_os.h"
  24:Src/main.cpp  **** #include <string.h>
  25:Src/main.cpp  **** #include <stdio.h>
  26:Src/main.cpp  **** 
  27:Src/main.cpp  **** /* Private includes ----------------------------------------------------------*/
  28:Src/main.cpp  **** /* USER CODE BEGIN Includes */
  29:Src/main.cpp  **** 
  30:Src/main.cpp  **** /* USER CODE END Includes */
ARM GAS  /tmp/cceeXmIr.s 			page 2


  31:Src/main.cpp  **** 
  32:Src/main.cpp  **** /* Private typedef -----------------------------------------------------------*/
  33:Src/main.cpp  **** /* USER CODE BEGIN PTD */
  34:Src/main.cpp  **** 
  35:Src/main.cpp  **** /* USER CODE END PTD */
  36:Src/main.cpp  **** 
  37:Src/main.cpp  **** /* Private define ------------------------------------------------------------*/
  38:Src/main.cpp  **** /* USER CODE BEGIN PD */
  39:Src/main.cpp  **** /* USER CODE END PD */
  40:Src/main.cpp  **** 
  41:Src/main.cpp  **** /* Private macro -------------------------------------------------------------*/
  42:Src/main.cpp  **** /* USER CODE BEGIN PM */
  43:Src/main.cpp  **** 
  44:Src/main.cpp  **** /* USER CODE END PM */
  45:Src/main.cpp  **** 
  46:Src/main.cpp  **** /* Private variables ---------------------------------------------------------*/
  47:Src/main.cpp  **** UART_HandleTypeDef huart2;
  48:Src/main.cpp  **** 
  49:Src/main.cpp  **** /* Definitions for defaultTask */
  50:Src/main.cpp  **** osThreadId_t defaultTaskHandle;
  51:Src/main.cpp  **** const osThreadAttr_t defaultTask_attributes = {
  52:Src/main.cpp  ****     .name = "defaultTask",
  53:Src/main.cpp  ****     .attr_bits = osThreadDetached,
  54:Src/main.cpp  ****     .cb_mem = NULL,
  55:Src/main.cpp  ****     .cb_size = 0,
  56:Src/main.cpp  ****     .stack_mem = NULL,
  57:Src/main.cpp  ****     .stack_size = 128 * 4,
  58:Src/main.cpp  ****     .priority = (osPriority_t)osPriorityNormal,
  59:Src/main.cpp  ****     .tz_module = 0,
  60:Src/main.cpp  ****     .reserved = 0};
  61:Src/main.cpp  **** /* USER CODE BEGIN PV */
  62:Src/main.cpp  **** 
  63:Src/main.cpp  **** /* USER CODE END PV */
  64:Src/main.cpp  **** 
  65:Src/main.cpp  **** /* Private function prototypes -----------------------------------------------*/
  66:Src/main.cpp  **** void SystemClock_Config(void);
  67:Src/main.cpp  **** static void MX_GPIO_Init(void);
  68:Src/main.cpp  **** static void MX_USART2_UART_Init(void);
  69:Src/main.cpp  **** void StartDefaultTask(void *argument);
  70:Src/main.cpp  **** 
  71:Src/main.cpp  **** /* USER CODE BEGIN PFP */
  72:Src/main.cpp  **** 
  73:Src/main.cpp  **** /* USER CODE END PFP */
  74:Src/main.cpp  **** 
  75:Src/main.cpp  **** /* Private user code ---------------------------------------------------------*/
  76:Src/main.cpp  **** /* USER CODE BEGIN 0 */
  77:Src/main.cpp  **** 
  78:Src/main.cpp  **** /* USER CODE END 0 */
  79:Src/main.cpp  **** 
  80:Src/main.cpp  **** /**
  81:Src/main.cpp  ****   * @brief  The application entry point.
  82:Src/main.cpp  ****   * @retval int
  83:Src/main.cpp  ****   */
  84:Src/main.cpp  **** int main(void)
  85:Src/main.cpp  **** {
  86:Src/main.cpp  ****   /* USER CODE BEGIN 1 */
  87:Src/main.cpp  ****   // ****************************** IMPORTANT NOTE ******************************
ARM GAS  /tmp/cceeXmIr.s 			page 3


  88:Src/main.cpp  ****   // When using FreeRTOS it is very important to make all variables in main() static so they will b
  89:Src/main.cpp  ****   // Otherwise these variables might be overwritten during an ISR and possibly the HardFault_Handle
  90:Src/main.cpp  ****   // This because after osKernelStart(), main will not be entered anymore and the main stack is reu
  91:Src/main.cpp  ****   // See https://www.freertos.org/FreeRTOS_Support_Forum_Archive/January_2015/freertos_Main_stack_p
  92:Src/main.cpp  ****   /* USER CODE END 1 */
  93:Src/main.cpp  **** 
  94:Src/main.cpp  ****   /* MCU Configuration--------------------------------------------------------*/
  95:Src/main.cpp  **** 
  96:Src/main.cpp  ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  97:Src/main.cpp  ****   HAL_Init();
  98:Src/main.cpp  **** 
  99:Src/main.cpp  ****   /* USER CODE BEGIN Init */
 100:Src/main.cpp  **** 
 101:Src/main.cpp  ****   /* USER CODE END Init */
 102:Src/main.cpp  **** 
 103:Src/main.cpp  ****   /* Configure the system clock */
 104:Src/main.cpp  ****   SystemClock_Config();
 105:Src/main.cpp  **** 
 106:Src/main.cpp  ****   /* USER CODE BEGIN SysInit */
 107:Src/main.cpp  **** 
 108:Src/main.cpp  ****   /* USER CODE END SysInit */
 109:Src/main.cpp  **** 
 110:Src/main.cpp  ****   /* Initialize all configured peripherals */
 111:Src/main.cpp  ****   MX_GPIO_Init();
 112:Src/main.cpp  ****   MX_USART2_UART_Init();
 113:Src/main.cpp  ****   /* USER CODE BEGIN 2 */
 114:Src/main.cpp  ****   static char msgBuf[80];
 115:Src/main.cpp  ****   sprintf(msgBuf, "%s", "Hello World!\r\n");
 116:Src/main.cpp  ****   HAL_UART_Transmit(&huart2, (uint8_t *)msgBuf, strlen(msgBuf), HAL_MAX_DELAY);
 117:Src/main.cpp  ****   /* USER CODE END 2 */
 118:Src/main.cpp  **** 
 119:Src/main.cpp  ****   /* Init scheduler */
 120:Src/main.cpp  ****   //osKernelInitialize();   // Uncomment if FreeRTOS will be used
 121:Src/main.cpp  **** 
 122:Src/main.cpp  ****   /* USER CODE BEGIN RTOS_MUTEX */
 123:Src/main.cpp  ****   /* add mutexes, ... */
 124:Src/main.cpp  ****   /* USER CODE END RTOS_MUTEX */
 125:Src/main.cpp  **** 
 126:Src/main.cpp  ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 127:Src/main.cpp  ****   /* add semaphores, ... */
 128:Src/main.cpp  ****   /* USER CODE END RTOS_SEMAPHORES */
 129:Src/main.cpp  **** 
 130:Src/main.cpp  ****   /* USER CODE BEGIN RTOS_TIMERS */
 131:Src/main.cpp  ****   /* start timers, add new ones, ... */
 132:Src/main.cpp  ****   /* USER CODE END RTOS_TIMERS */
 133:Src/main.cpp  **** 
 134:Src/main.cpp  ****   /* USER CODE BEGIN RTOS_QUEUES */
 135:Src/main.cpp  ****   /* add queues, ... */
 136:Src/main.cpp  ****   /* USER CODE END RTOS_QUEUES */
 137:Src/main.cpp  **** 
 138:Src/main.cpp  ****   /* Create the thread(s) */
 139:Src/main.cpp  ****   /* creation of defaultTask */
 140:Src/main.cpp  ****   // Uncomment the line below if is FreeRTOS is used.
 141:Src/main.cpp  ****   // defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 142:Src/main.cpp  **** 
 143:Src/main.cpp  ****   /* USER CODE BEGIN RTOS_THREADS */
 144:Src/main.cpp  ****   /* add threads, ... */
ARM GAS  /tmp/cceeXmIr.s 			page 4


 145:Src/main.cpp  ****   /* USER CODE END RTOS_THREADS */
 146:Src/main.cpp  **** 
 147:Src/main.cpp  ****   /* Start scheduler */
 148:Src/main.cpp  ****   // Uncomment the line below if is FreeRTOS is used.
 149:Src/main.cpp  ****   // osKernelStart();
 150:Src/main.cpp  **** 
 151:Src/main.cpp  ****   /* We should never get here as control is now taken by the scheduler */
 152:Src/main.cpp  ****   /* Infinite loop */
 153:Src/main.cpp  ****   /* USER CODE BEGIN WHILE */
 154:Src/main.cpp  ****   while (1)
 155:Src/main.cpp  ****   {
 156:Src/main.cpp  ****     sprintf(msgBuf, "%s", "In loop!\n");
 157:Src/main.cpp  ****     HAL_UART_Transmit(&huart2, (uint8_t *)msgBuf, strlen(msgBuf), HAL_MAX_DELAY);
 158:Src/main.cpp  ****     GPIOA->ODR ^= (1 << 5); // Toggle GPIO pin PA5 (onboard green LED).
 159:Src/main.cpp  ****     HAL_Delay(1000);
 160:Src/main.cpp  ****     /* USER CODE END WHILE */
 161:Src/main.cpp  **** 
 162:Src/main.cpp  ****     /* USER CODE BEGIN 3 */
 163:Src/main.cpp  ****   }
 164:Src/main.cpp  ****   /* USER CODE END 3 */
 165:Src/main.cpp  **** }
 166:Src/main.cpp  **** 
 167:Src/main.cpp  **** /**
 168:Src/main.cpp  ****   * @brief System Clock Configuration
 169:Src/main.cpp  ****   * @retval None
 170:Src/main.cpp  ****   */
 171:Src/main.cpp  **** void SystemClock_Config(void)
 172:Src/main.cpp  **** {
 173:Src/main.cpp  ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 174:Src/main.cpp  ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 175:Src/main.cpp  ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 176:Src/main.cpp  **** 
 177:Src/main.cpp  ****   /** Initializes the CPU, AHB and APB busses clocks 
 178:Src/main.cpp  ****   */
 179:Src/main.cpp  ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 180:Src/main.cpp  ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 181:Src/main.cpp  ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 182:Src/main.cpp  ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 183:Src/main.cpp  ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 184:Src/main.cpp  ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 185:Src/main.cpp  ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 186:Src/main.cpp  ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 187:Src/main.cpp  ****   {
 188:Src/main.cpp  ****     Error_Handler();
 189:Src/main.cpp  ****   }
 190:Src/main.cpp  ****   /** Initializes the CPU, AHB and APB busses clocks 
 191:Src/main.cpp  ****   */
 192:Src/main.cpp  ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | R
 193:Src/main.cpp  ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 194:Src/main.cpp  ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 195:Src/main.cpp  ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 196:Src/main.cpp  ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 197:Src/main.cpp  **** 
 198:Src/main.cpp  ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 199:Src/main.cpp  ****   {
 200:Src/main.cpp  ****     Error_Handler();
 201:Src/main.cpp  ****   }
ARM GAS  /tmp/cceeXmIr.s 			page 5


 202:Src/main.cpp  ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 203:Src/main.cpp  ****   PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 204:Src/main.cpp  ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 205:Src/main.cpp  ****   {
 206:Src/main.cpp  ****     Error_Handler();
 207:Src/main.cpp  ****   }
 208:Src/main.cpp  **** }
 209:Src/main.cpp  **** 
 210:Src/main.cpp  **** /**
 211:Src/main.cpp  ****   * @brief USART2 Initialization Function
 212:Src/main.cpp  ****   * @param None
 213:Src/main.cpp  ****   * @retval None
 214:Src/main.cpp  ****   */
 215:Src/main.cpp  **** static void MX_USART2_UART_Init(void)
 216:Src/main.cpp  **** {
 217:Src/main.cpp  **** 
 218:Src/main.cpp  ****   /* USER CODE BEGIN USART2_Init 0 */
 219:Src/main.cpp  **** 
 220:Src/main.cpp  ****   /* USER CODE END USART2_Init 0 */
 221:Src/main.cpp  **** 
 222:Src/main.cpp  ****   /* USER CODE BEGIN USART2_Init 1 */
 223:Src/main.cpp  **** 
 224:Src/main.cpp  ****   /* USER CODE END USART2_Init 1 */
 225:Src/main.cpp  ****   huart2.Instance = USART2;
 226:Src/main.cpp  ****   huart2.Init.BaudRate = 38400;
 227:Src/main.cpp  ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 228:Src/main.cpp  ****   huart2.Init.StopBits = UART_STOPBITS_1;
 229:Src/main.cpp  ****   huart2.Init.Parity = UART_PARITY_NONE;
 230:Src/main.cpp  ****   huart2.Init.Mode = UART_MODE_TX_RX;
 231:Src/main.cpp  ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 232:Src/main.cpp  ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 233:Src/main.cpp  ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 234:Src/main.cpp  ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 235:Src/main.cpp  ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 236:Src/main.cpp  ****   {
 237:Src/main.cpp  ****     Error_Handler();
 238:Src/main.cpp  ****   }
 239:Src/main.cpp  ****   /* USER CODE BEGIN USART2_Init 2 */
 240:Src/main.cpp  **** 
 241:Src/main.cpp  ****   /* USER CODE END USART2_Init 2 */
 242:Src/main.cpp  **** }
 243:Src/main.cpp  **** 
 244:Src/main.cpp  **** /**
 245:Src/main.cpp  ****   * @brief GPIO Initialization Function
 246:Src/main.cpp  ****   * @param None
 247:Src/main.cpp  ****   * @retval None
 248:Src/main.cpp  ****   */
 249:Src/main.cpp  **** static void MX_GPIO_Init(void)
 250:Src/main.cpp  **** {
  29              		.loc 1 250 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 40
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 10B5     		push	{r4, lr}
  34              		.save {r4, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cceeXmIr.s 			page 6


  37              		.cfi_offset 4, -8
  38              		.cfi_offset 14, -4
  39              		.pad #40
  40 0002 8AB0     		sub	sp, sp, #40
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 48
 251:Src/main.cpp  ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  43              		.loc 1 251 3 view .LVU1
  44              		.loc 1 251 20 is_stmt 0 view .LVU2
  45 0004 0024     		movs	r4, #0
  46 0006 0594     		str	r4, [sp, #20]
  47 0008 0694     		str	r4, [sp, #24]
  48 000a 0794     		str	r4, [sp, #28]
  49 000c 0894     		str	r4, [sp, #32]
  50 000e 0994     		str	r4, [sp, #36]
 252:Src/main.cpp  **** 
 253:Src/main.cpp  ****   /* GPIO Ports Clock Enable */
 254:Src/main.cpp  ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  51              		.loc 1 254 3 is_stmt 1 view .LVU3
  52              	.LBB2:
  53              		.loc 1 254 3 view .LVU4
  54              		.loc 1 254 3 view .LVU5
  55 0010 204B     		ldr	r3, .L3
  56 0012 5A69     		ldr	r2, [r3, #20]
  57 0014 42F40022 		orr	r2, r2, #524288
  58 0018 5A61     		str	r2, [r3, #20]
  59              		.loc 1 254 3 view .LVU6
  60 001a 5A69     		ldr	r2, [r3, #20]
  61 001c 02F40022 		and	r2, r2, #524288
  62 0020 0192     		str	r2, [sp, #4]
  63              		.loc 1 254 3 view .LVU7
  64 0022 019A     		ldr	r2, [sp, #4]
  65              	.LBE2:
 255:Src/main.cpp  ****   __HAL_RCC_GPIOF_CLK_ENABLE();
  66              		.loc 1 255 3 view .LVU8
  67              	.LBB3:
  68              		.loc 1 255 3 view .LVU9
  69              		.loc 1 255 3 view .LVU10
  70 0024 5A69     		ldr	r2, [r3, #20]
  71 0026 42F48002 		orr	r2, r2, #4194304
  72 002a 5A61     		str	r2, [r3, #20]
  73              		.loc 1 255 3 view .LVU11
  74 002c 5A69     		ldr	r2, [r3, #20]
  75 002e 02F48002 		and	r2, r2, #4194304
  76 0032 0292     		str	r2, [sp, #8]
  77              		.loc 1 255 3 view .LVU12
  78 0034 029A     		ldr	r2, [sp, #8]
  79              	.LBE3:
 256:Src/main.cpp  ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  80              		.loc 1 256 3 view .LVU13
  81              	.LBB4:
  82              		.loc 1 256 3 view .LVU14
  83              		.loc 1 256 3 view .LVU15
  84 0036 5A69     		ldr	r2, [r3, #20]
  85 0038 42F40032 		orr	r2, r2, #131072
  86 003c 5A61     		str	r2, [r3, #20]
  87              		.loc 1 256 3 view .LVU16
ARM GAS  /tmp/cceeXmIr.s 			page 7


  88 003e 5A69     		ldr	r2, [r3, #20]
  89 0040 02F40032 		and	r2, r2, #131072
  90 0044 0392     		str	r2, [sp, #12]
  91              		.loc 1 256 3 view .LVU17
  92 0046 039A     		ldr	r2, [sp, #12]
  93              	.LBE4:
 257:Src/main.cpp  ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  94              		.loc 1 257 3 view .LVU18
  95              	.LBB5:
  96              		.loc 1 257 3 view .LVU19
  97              		.loc 1 257 3 view .LVU20
  98 0048 5A69     		ldr	r2, [r3, #20]
  99 004a 42F48022 		orr	r2, r2, #262144
 100 004e 5A61     		str	r2, [r3, #20]
 101              		.loc 1 257 3 view .LVU21
 102 0050 5B69     		ldr	r3, [r3, #20]
 103 0052 03F48023 		and	r3, r3, #262144
 104 0056 0493     		str	r3, [sp, #16]
 105              		.loc 1 257 3 view .LVU22
 106 0058 049B     		ldr	r3, [sp, #16]
 107              	.LBE5:
 258:Src/main.cpp  **** 
 259:Src/main.cpp  ****   /*Configure GPIO pin Output Level */
 260:Src/main.cpp  ****   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 108              		.loc 1 260 3 view .LVU23
 109              		.loc 1 260 20 is_stmt 0 view .LVU24
 110 005a 2246     		mov	r2, r4
 111 005c 2021     		movs	r1, #32
 112 005e 4FF09040 		mov	r0, #1207959552
 113 0062 FFF7FEFF 		bl	HAL_GPIO_WritePin
 114              	.LVL0:
 261:Src/main.cpp  **** 
 262:Src/main.cpp  ****   /*Configure GPIO pin : B1_Pin */
 263:Src/main.cpp  ****   GPIO_InitStruct.Pin = B1_Pin;
 115              		.loc 1 263 3 is_stmt 1 view .LVU25
 116              		.loc 1 263 23 is_stmt 0 view .LVU26
 117 0066 4FF40053 		mov	r3, #8192
 118 006a 0593     		str	r3, [sp, #20]
 264:Src/main.cpp  ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 119              		.loc 1 264 3 is_stmt 1 view .LVU27
 120              		.loc 1 264 24 is_stmt 0 view .LVU28
 121 006c 0A4B     		ldr	r3, .L3+4
 122 006e 0693     		str	r3, [sp, #24]
 265:Src/main.cpp  ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 123              		.loc 1 265 3 is_stmt 1 view .LVU29
 124              		.loc 1 265 24 is_stmt 0 view .LVU30
 125 0070 0794     		str	r4, [sp, #28]
 266:Src/main.cpp  ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 126              		.loc 1 266 3 is_stmt 1 view .LVU31
 127              		.loc 1 266 16 is_stmt 0 view .LVU32
 128 0072 05A9     		add	r1, sp, #20
 129 0074 0948     		ldr	r0, .L3+8
 130 0076 FFF7FEFF 		bl	HAL_GPIO_Init
 131              	.LVL1:
 267:Src/main.cpp  **** 
 268:Src/main.cpp  ****   /*Configure GPIO pin : LD2_Pin */
 269:Src/main.cpp  ****   GPIO_InitStruct.Pin = LD2_Pin;
ARM GAS  /tmp/cceeXmIr.s 			page 8


 132              		.loc 1 269 3 is_stmt 1 view .LVU33
 133              		.loc 1 269 23 is_stmt 0 view .LVU34
 134 007a 2023     		movs	r3, #32
 135 007c 0593     		str	r3, [sp, #20]
 270:Src/main.cpp  ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 136              		.loc 1 270 3 is_stmt 1 view .LVU35
 137              		.loc 1 270 24 is_stmt 0 view .LVU36
 138 007e 0123     		movs	r3, #1
 139 0080 0693     		str	r3, [sp, #24]
 271:Src/main.cpp  ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 140              		.loc 1 271 3 is_stmt 1 view .LVU37
 141              		.loc 1 271 24 is_stmt 0 view .LVU38
 142 0082 0794     		str	r4, [sp, #28]
 272:Src/main.cpp  ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 143              		.loc 1 272 3 is_stmt 1 view .LVU39
 144              		.loc 1 272 25 is_stmt 0 view .LVU40
 145 0084 0894     		str	r4, [sp, #32]
 273:Src/main.cpp  ****   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 146              		.loc 1 273 3 is_stmt 1 view .LVU41
 147              		.loc 1 273 16 is_stmt 0 view .LVU42
 148 0086 05A9     		add	r1, sp, #20
 149 0088 4FF09040 		mov	r0, #1207959552
 150 008c FFF7FEFF 		bl	HAL_GPIO_Init
 151              	.LVL2:
 274:Src/main.cpp  **** }
 152              		.loc 1 274 1 view .LVU43
 153 0090 0AB0     		add	sp, sp, #40
 154              	.LCFI2:
 155              		.cfi_def_cfa_offset 8
 156              		@ sp needed
 157 0092 10BD     		pop	{r4, pc}
 158              	.L4:
 159              		.align	2
 160              	.L3:
 161 0094 00100240 		.word	1073876992
 162 0098 00002110 		.word	270598144
 163 009c 00080048 		.word	1207961600
 164              		.cfi_endproc
 165              	.LFE138:
 166              		.fnend
 168              		.section	.text._ZL19MX_USART2_UART_Initv,"ax",%progbits
 169              		.align	1
 170              		.syntax unified
 171              		.thumb
 172              		.thumb_func
 173              		.fpu fpv4-sp-d16
 175              	_ZL19MX_USART2_UART_Initv:
 176              		.fnstart
 177              	.LFB137:
 216:Src/main.cpp  **** 
 178              		.loc 1 216 1 is_stmt 1 view -0
 179              		.cfi_startproc
 180              		@ args = 0, pretend = 0, frame = 0
 181              		@ frame_needed = 0, uses_anonymous_args = 0
 182 0000 08B5     		push	{r3, lr}
 183              		.save {r3, lr}
 184              	.LCFI3:
ARM GAS  /tmp/cceeXmIr.s 			page 9


 185              		.cfi_def_cfa_offset 8
 186              		.cfi_offset 3, -8
 187              		.cfi_offset 14, -4
 225:Src/main.cpp  ****   huart2.Init.BaudRate = 38400;
 188              		.loc 1 225 3 view .LVU45
 225:Src/main.cpp  ****   huart2.Init.BaudRate = 38400;
 189              		.loc 1 225 19 is_stmt 0 view .LVU46
 190 0002 0948     		ldr	r0, .L7
 191 0004 094B     		ldr	r3, .L7+4
 192 0006 0360     		str	r3, [r0]
 226:Src/main.cpp  ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 193              		.loc 1 226 3 is_stmt 1 view .LVU47
 226:Src/main.cpp  ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 194              		.loc 1 226 24 is_stmt 0 view .LVU48
 195 0008 4FF41643 		mov	r3, #38400
 196 000c 4360     		str	r3, [r0, #4]
 227:Src/main.cpp  ****   huart2.Init.StopBits = UART_STOPBITS_1;
 197              		.loc 1 227 3 is_stmt 1 view .LVU49
 227:Src/main.cpp  ****   huart2.Init.StopBits = UART_STOPBITS_1;
 198              		.loc 1 227 26 is_stmt 0 view .LVU50
 199 000e 0023     		movs	r3, #0
 200 0010 8360     		str	r3, [r0, #8]
 228:Src/main.cpp  ****   huart2.Init.Parity = UART_PARITY_NONE;
 201              		.loc 1 228 3 is_stmt 1 view .LVU51
 228:Src/main.cpp  ****   huart2.Init.Parity = UART_PARITY_NONE;
 202              		.loc 1 228 24 is_stmt 0 view .LVU52
 203 0012 C360     		str	r3, [r0, #12]
 229:Src/main.cpp  ****   huart2.Init.Mode = UART_MODE_TX_RX;
 204              		.loc 1 229 3 is_stmt 1 view .LVU53
 229:Src/main.cpp  ****   huart2.Init.Mode = UART_MODE_TX_RX;
 205              		.loc 1 229 22 is_stmt 0 view .LVU54
 206 0014 0361     		str	r3, [r0, #16]
 230:Src/main.cpp  ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 207              		.loc 1 230 3 is_stmt 1 view .LVU55
 230:Src/main.cpp  ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 208              		.loc 1 230 20 is_stmt 0 view .LVU56
 209 0016 0C22     		movs	r2, #12
 210 0018 4261     		str	r2, [r0, #20]
 231:Src/main.cpp  ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 211              		.loc 1 231 3 is_stmt 1 view .LVU57
 231:Src/main.cpp  ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 212              		.loc 1 231 25 is_stmt 0 view .LVU58
 213 001a 8361     		str	r3, [r0, #24]
 232:Src/main.cpp  ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 214              		.loc 1 232 3 is_stmt 1 view .LVU59
 232:Src/main.cpp  ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 215              		.loc 1 232 28 is_stmt 0 view .LVU60
 216 001c C361     		str	r3, [r0, #28]
 233:Src/main.cpp  ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 217              		.loc 1 233 3 is_stmt 1 view .LVU61
 233:Src/main.cpp  ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 218              		.loc 1 233 30 is_stmt 0 view .LVU62
 219 001e 0362     		str	r3, [r0, #32]
 234:Src/main.cpp  ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 220              		.loc 1 234 3 is_stmt 1 view .LVU63
 234:Src/main.cpp  ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 221              		.loc 1 234 38 is_stmt 0 view .LVU64
ARM GAS  /tmp/cceeXmIr.s 			page 10


 222 0020 4362     		str	r3, [r0, #36]
 235:Src/main.cpp  ****   {
 223              		.loc 1 235 3 is_stmt 1 view .LVU65
 235:Src/main.cpp  ****   {
 224              		.loc 1 235 20 is_stmt 0 view .LVU66
 225 0022 FFF7FEFF 		bl	HAL_UART_Init
 226              	.LVL3:
 242:Src/main.cpp  **** 
 227              		.loc 1 242 1 view .LVU67
 228 0026 08BD     		pop	{r3, pc}
 229              	.L8:
 230              		.align	2
 231              	.L7:
 232 0028 00000000 		.word	.LANCHOR0
 233 002c 00440040 		.word	1073759232
 234              		.cfi_endproc
 235              	.LFE137:
 236              		.fnend
 238              		.section	.text._Z18SystemClock_Configv,"ax",%progbits
 239              		.align	1
 240              		.global	_Z18SystemClock_Configv
 241              		.syntax unified
 242              		.thumb
 243              		.thumb_func
 244              		.fpu fpv4-sp-d16
 246              	_Z18SystemClock_Configv:
 247              		.fnstart
 248              	.LFB136:
 172:Src/main.cpp  ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 249              		.loc 1 172 1 is_stmt 1 view -0
 250              		.cfi_startproc
 251              		@ args = 0, pretend = 0, frame = 152
 252              		@ frame_needed = 0, uses_anonymous_args = 0
 253 0000 30B5     		push	{r4, r5, lr}
 254              		.save {r4, r5, lr}
 255              	.LCFI4:
 256              		.cfi_def_cfa_offset 12
 257              		.cfi_offset 4, -12
 258              		.cfi_offset 5, -8
 259              		.cfi_offset 14, -4
 260              		.pad #156
 261 0002 A7B0     		sub	sp, sp, #156
 262              	.LCFI5:
 263              		.cfi_def_cfa_offset 168
 173:Src/main.cpp  ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 264              		.loc 1 173 3 view .LVU69
 173:Src/main.cpp  ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 265              		.loc 1 173 22 is_stmt 0 view .LVU70
 266 0004 0024     		movs	r4, #0
 267 0006 1D94     		str	r4, [sp, #116]
 268 0008 1E94     		str	r4, [sp, #120]
 269 000a 2194     		str	r4, [sp, #132]
 174:Src/main.cpp  ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 270              		.loc 1 174 3 is_stmt 1 view .LVU71
 174:Src/main.cpp  ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 271              		.loc 1 174 22 is_stmt 0 view .LVU72
 272 000c 1794     		str	r4, [sp, #92]
ARM GAS  /tmp/cceeXmIr.s 			page 11


 273 000e 1894     		str	r4, [sp, #96]
 274 0010 1994     		str	r4, [sp, #100]
 275 0012 1A94     		str	r4, [sp, #104]
 276 0014 1B94     		str	r4, [sp, #108]
 175:Src/main.cpp  **** 
 277              		.loc 1 175 3 is_stmt 1 view .LVU73
 175:Src/main.cpp  **** 
 278              		.loc 1 175 28 is_stmt 0 view .LVU74
 279 0016 5822     		movs	r2, #88
 280 0018 2146     		mov	r1, r4
 281 001a 01A8     		add	r0, sp, #4
 282 001c FFF7FEFF 		bl	memset
 283              	.LVL4:
 179:Src/main.cpp  ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 284              		.loc 1 179 3 is_stmt 1 view .LVU75
 179:Src/main.cpp  ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 285              		.loc 1 179 36 is_stmt 0 view .LVU76
 286 0020 0225     		movs	r5, #2
 287 0022 1C95     		str	r5, [sp, #112]
 180:Src/main.cpp  ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 288              		.loc 1 180 3 is_stmt 1 view .LVU77
 180:Src/main.cpp  ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 289              		.loc 1 180 30 is_stmt 0 view .LVU78
 290 0024 0123     		movs	r3, #1
 291 0026 1F93     		str	r3, [sp, #124]
 181:Src/main.cpp  ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 292              		.loc 1 181 3 is_stmt 1 view .LVU79
 181:Src/main.cpp  ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 293              		.loc 1 181 41 is_stmt 0 view .LVU80
 294 0028 1023     		movs	r3, #16
 295 002a 2093     		str	r3, [sp, #128]
 182:Src/main.cpp  ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 296              		.loc 1 182 3 is_stmt 1 view .LVU81
 182:Src/main.cpp  ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 297              		.loc 1 182 34 is_stmt 0 view .LVU82
 298 002c 2295     		str	r5, [sp, #136]
 183:Src/main.cpp  ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 299              		.loc 1 183 3 is_stmt 1 view .LVU83
 183:Src/main.cpp  ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 300              		.loc 1 183 35 is_stmt 0 view .LVU84
 301 002e 4FF40043 		mov	r3, #32768
 302 0032 2393     		str	r3, [sp, #140]
 184:Src/main.cpp  ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 303              		.loc 1 184 3 is_stmt 1 view .LVU85
 184:Src/main.cpp  ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 304              		.loc 1 184 32 is_stmt 0 view .LVU86
 305 0034 4FF4E013 		mov	r3, #1835008
 306 0038 2493     		str	r3, [sp, #144]
 185:Src/main.cpp  ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 307              		.loc 1 185 3 is_stmt 1 view .LVU87
 185:Src/main.cpp  ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 308              		.loc 1 185 32 is_stmt 0 view .LVU88
 309 003a 2594     		str	r4, [sp, #148]
 186:Src/main.cpp  ****   {
 310              		.loc 1 186 3 is_stmt 1 view .LVU89
 186:Src/main.cpp  ****   {
 311              		.loc 1 186 24 is_stmt 0 view .LVU90
ARM GAS  /tmp/cceeXmIr.s 			page 12


 312 003c 1CA8     		add	r0, sp, #112
 313 003e FFF7FEFF 		bl	HAL_RCC_OscConfig
 314              	.LVL5:
 192:Src/main.cpp  ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 315              		.loc 1 192 3 is_stmt 1 view .LVU91
 192:Src/main.cpp  ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 316              		.loc 1 192 31 is_stmt 0 view .LVU92
 317 0042 0F23     		movs	r3, #15
 318 0044 1793     		str	r3, [sp, #92]
 193:Src/main.cpp  ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 319              		.loc 1 193 3 is_stmt 1 view .LVU93
 193:Src/main.cpp  ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 320              		.loc 1 193 34 is_stmt 0 view .LVU94
 321 0046 1895     		str	r5, [sp, #96]
 194:Src/main.cpp  ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 322              		.loc 1 194 3 is_stmt 1 view .LVU95
 194:Src/main.cpp  ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 323              		.loc 1 194 35 is_stmt 0 view .LVU96
 324 0048 1994     		str	r4, [sp, #100]
 195:Src/main.cpp  ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 325              		.loc 1 195 3 is_stmt 1 view .LVU97
 195:Src/main.cpp  ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 326              		.loc 1 195 36 is_stmt 0 view .LVU98
 327 004a 4FF48063 		mov	r3, #1024
 328 004e 1A93     		str	r3, [sp, #104]
 196:Src/main.cpp  **** 
 329              		.loc 1 196 3 is_stmt 1 view .LVU99
 196:Src/main.cpp  **** 
 330              		.loc 1 196 36 is_stmt 0 view .LVU100
 331 0050 1B94     		str	r4, [sp, #108]
 198:Src/main.cpp  ****   {
 332              		.loc 1 198 3 is_stmt 1 view .LVU101
 198:Src/main.cpp  ****   {
 333              		.loc 1 198 26 is_stmt 0 view .LVU102
 334 0052 2946     		mov	r1, r5
 335 0054 17A8     		add	r0, sp, #92
 336 0056 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 337              	.LVL6:
 202:Src/main.cpp  ****   PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 338              		.loc 1 202 3 is_stmt 1 view .LVU103
 202:Src/main.cpp  ****   PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 339              		.loc 1 202 38 is_stmt 0 view .LVU104
 340 005a 0195     		str	r5, [sp, #4]
 203:Src/main.cpp  ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 341              		.loc 1 203 3 is_stmt 1 view .LVU105
 203:Src/main.cpp  ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 342              		.loc 1 203 38 is_stmt 0 view .LVU106
 343 005c 0494     		str	r4, [sp, #16]
 204:Src/main.cpp  ****   {
 344              		.loc 1 204 3 is_stmt 1 view .LVU107
 204:Src/main.cpp  ****   {
 345              		.loc 1 204 32 is_stmt 0 view .LVU108
 346 005e 01A8     		add	r0, sp, #4
 347 0060 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 348              	.LVL7:
 208:Src/main.cpp  **** 
 349              		.loc 1 208 1 view .LVU109
ARM GAS  /tmp/cceeXmIr.s 			page 13


 350 0064 27B0     		add	sp, sp, #156
 351              	.LCFI6:
 352              		.cfi_def_cfa_offset 12
 353              		@ sp needed
 354 0066 30BD     		pop	{r4, r5, pc}
 355              		.cfi_endproc
 356              	.LFE136:
 357              		.fnend
 359              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 360              		.align	2
 361              	.LC0:
 362 0000 48656C6C 		.ascii	"Hello World!\015\012\000"
 362      6F20576F 
 362      726C6421 
 362      0D0A00
 363 000f 00       		.align	2
 364              	.LC1:
 365 0010 496E206C 		.ascii	"In loop!\012\000"
 365      6F6F7021 
 365      0A00
 366              		.section	.text.main,"ax",%progbits
 367              		.align	1
 368              		.global	main
 369              		.syntax unified
 370              		.thumb
 371              		.thumb_func
 372              		.fpu fpv4-sp-d16
 374              	main:
 375              		.fnstart
 376              	.LFB135:
  85:Src/main.cpp  ****   /* USER CODE BEGIN 1 */
 377              		.loc 1 85 1 is_stmt 1 view -0
 378              		.cfi_startproc
 379              		@ args = 0, pretend = 0, frame = 0
 380              		@ frame_needed = 0, uses_anonymous_args = 0
 381 0000 38B5     		push	{r3, r4, r5, lr}
 382              		.save {r3, r4, r5, lr}
 383              	.LCFI7:
 384              		.cfi_def_cfa_offset 16
 385              		.cfi_offset 3, -16
 386              		.cfi_offset 4, -12
 387              		.cfi_offset 5, -8
 388              		.cfi_offset 14, -4
  97:Src/main.cpp  **** 
 389              		.loc 1 97 3 view .LVU111
  97:Src/main.cpp  **** 
 390              		.loc 1 97 11 is_stmt 0 view .LVU112
 391 0002 FFF7FEFF 		bl	HAL_Init
 392              	.LVL8:
 104:Src/main.cpp  **** 
 393              		.loc 1 104 3 is_stmt 1 view .LVU113
 104:Src/main.cpp  **** 
 394              		.loc 1 104 21 is_stmt 0 view .LVU114
 395 0006 FFF7FEFF 		bl	_Z18SystemClock_Configv
 396              	.LVL9:
 111:Src/main.cpp  ****   MX_USART2_UART_Init();
 397              		.loc 1 111 3 is_stmt 1 view .LVU115
ARM GAS  /tmp/cceeXmIr.s 			page 14


 111:Src/main.cpp  ****   MX_USART2_UART_Init();
 398              		.loc 1 111 15 is_stmt 0 view .LVU116
 399 000a FFF7FEFF 		bl	_ZL12MX_GPIO_Initv
 400              	.LVL10:
 112:Src/main.cpp  ****   /* USER CODE BEGIN 2 */
 401              		.loc 1 112 3 is_stmt 1 view .LVU117
 112:Src/main.cpp  ****   /* USER CODE BEGIN 2 */
 402              		.loc 1 112 22 is_stmt 0 view .LVU118
 403 000e FFF7FEFF 		bl	_ZL19MX_USART2_UART_Initv
 404              	.LVL11:
 114:Src/main.cpp  ****   sprintf(msgBuf, "%s", "Hello World!\r\n");
 405              		.loc 1 114 3 is_stmt 1 view .LVU119
 115:Src/main.cpp  ****   HAL_UART_Transmit(&huart2, (uint8_t *)msgBuf, strlen(msgBuf), HAL_MAX_DELAY);
 406              		.loc 1 115 3 view .LVU120
 115:Src/main.cpp  ****   HAL_UART_Transmit(&huart2, (uint8_t *)msgBuf, strlen(msgBuf), HAL_MAX_DELAY);
 407              		.loc 1 115 10 is_stmt 0 view .LVU121
 408 0012 174D     		ldr	r5, .L14
 409 0014 174B     		ldr	r3, .L14+4
 410 0016 2C46     		mov	r4, r5
 411 0018 0FCB     		ldm	r3, {r0, r1, r2, r3}
 412 001a 07C4     		stmia	r4!, {r0, r1, r2}
 413 001c 24F8023B 		strh	r3, [r4], #2	@ movhi
 414 0020 1B0C     		lsrs	r3, r3, #16
 415 0022 2370     		strb	r3, [r4]
 116:Src/main.cpp  ****   /* USER CODE END 2 */
 416              		.loc 1 116 3 is_stmt 1 view .LVU122
 116:Src/main.cpp  ****   /* USER CODE END 2 */
 417              		.loc 1 116 55 is_stmt 0 view .LVU123
 418 0024 2846     		mov	r0, r5
 419 0026 FFF7FEFF 		bl	strlen
 420              	.LVL12:
 116:Src/main.cpp  ****   /* USER CODE END 2 */
 421              		.loc 1 116 20 view .LVU124
 422 002a 4FF0FF33 		mov	r3, #-1
 423 002e 82B2     		uxth	r2, r0
 424 0030 2946     		mov	r1, r5
 425 0032 1148     		ldr	r0, .L14+8
 426 0034 FFF7FEFF 		bl	HAL_UART_Transmit
 427              	.LVL13:
 428              	.L12:
 154:Src/main.cpp  ****   {
 429              		.loc 1 154 3 is_stmt 1 discriminator 1 view .LVU125
 156:Src/main.cpp  ****     HAL_UART_Transmit(&huart2, (uint8_t *)msgBuf, strlen(msgBuf), HAL_MAX_DELAY);
 430              		.loc 1 156 5 discriminator 1 view .LVU126
 156:Src/main.cpp  ****     HAL_UART_Transmit(&huart2, (uint8_t *)msgBuf, strlen(msgBuf), HAL_MAX_DELAY);
 431              		.loc 1 156 12 is_stmt 0 discriminator 1 view .LVU127
 432 0038 0D4C     		ldr	r4, .L14
 433 003a 104A     		ldr	r2, .L14+12
 434 003c 2346     		mov	r3, r4
 435 003e 07CA     		ldm	r2, {r0, r1, r2}
 436 0040 03C3     		stmia	r3!, {r0, r1}
 437 0042 1A80     		strh	r2, [r3]	@ movhi
 157:Src/main.cpp  ****     GPIOA->ODR ^= (1 << 5); // Toggle GPIO pin PA5 (onboard green LED).
 438              		.loc 1 157 5 is_stmt 1 discriminator 1 view .LVU128
 157:Src/main.cpp  ****     GPIOA->ODR ^= (1 << 5); // Toggle GPIO pin PA5 (onboard green LED).
 439              		.loc 1 157 57 is_stmt 0 discriminator 1 view .LVU129
 440 0044 2046     		mov	r0, r4
ARM GAS  /tmp/cceeXmIr.s 			page 15


 441 0046 FFF7FEFF 		bl	strlen
 442              	.LVL14:
 157:Src/main.cpp  ****     GPIOA->ODR ^= (1 << 5); // Toggle GPIO pin PA5 (onboard green LED).
 443              		.loc 1 157 22 discriminator 1 view .LVU130
 444 004a 4FF0FF33 		mov	r3, #-1
 445 004e 82B2     		uxth	r2, r0
 446 0050 2146     		mov	r1, r4
 447 0052 0948     		ldr	r0, .L14+8
 448 0054 FFF7FEFF 		bl	HAL_UART_Transmit
 449              	.LVL15:
 158:Src/main.cpp  ****     HAL_Delay(1000);
 450              		.loc 1 158 5 is_stmt 1 discriminator 1 view .LVU131
 158:Src/main.cpp  ****     HAL_Delay(1000);
 451              		.loc 1 158 16 is_stmt 0 discriminator 1 view .LVU132
 452 0058 4FF09042 		mov	r2, #1207959552
 453 005c 5369     		ldr	r3, [r2, #20]
 454 005e 83F02003 		eor	r3, r3, #32
 455 0062 5361     		str	r3, [r2, #20]
 159:Src/main.cpp  ****     /* USER CODE END WHILE */
 456              		.loc 1 159 5 is_stmt 1 discriminator 1 view .LVU133
 159:Src/main.cpp  ****     /* USER CODE END WHILE */
 457              		.loc 1 159 14 is_stmt 0 discriminator 1 view .LVU134
 458 0064 4FF47A70 		mov	r0, #1000
 459 0068 FFF7FEFF 		bl	HAL_Delay
 460              	.LVL16:
 154:Src/main.cpp  ****   {
 461              		.loc 1 154 3 is_stmt 1 discriminator 1 view .LVU135
 462 006c E4E7     		b	.L12
 463              	.L15:
 464 006e 00BF     		.align	2
 465              	.L14:
 466 0070 00000000 		.word	.LANCHOR1
 467 0074 00000000 		.word	.LC0
 468 0078 00000000 		.word	.LANCHOR0
 469 007c 10000000 		.word	.LC1
 470              		.cfi_endproc
 471              	.LFE135:
 472              		.fnend
 474              		.section	.text._Z16StartDefaultTaskPv,"ax",%progbits
 475              		.align	1
 476              		.global	_Z16StartDefaultTaskPv
 477              		.syntax unified
 478              		.thumb
 479              		.thumb_func
 480              		.fpu fpv4-sp-d16
 482              	_Z16StartDefaultTaskPv:
 483              		.fnstart
 484              	.LFB139:
 275:Src/main.cpp  **** 
 276:Src/main.cpp  **** /* USER CODE BEGIN 4 */
 277:Src/main.cpp  **** 
 278:Src/main.cpp  **** /* USER CODE END 4 */
 279:Src/main.cpp  **** 
 280:Src/main.cpp  **** /* USER CODE BEGIN Header_StartDefaultTask */
 281:Src/main.cpp  **** /**
 282:Src/main.cpp  ****   * @brief  Function implementing the defaultTask thread.
 283:Src/main.cpp  ****   * @param  argument: Not used 
ARM GAS  /tmp/cceeXmIr.s 			page 16


 284:Src/main.cpp  ****   * @retval None
 285:Src/main.cpp  ****   */
 286:Src/main.cpp  **** /* USER CODE END Header_StartDefaultTask */
 287:Src/main.cpp  **** void StartDefaultTask(void *argument)
 288:Src/main.cpp  **** {
 485              		.loc 1 288 1 view -0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 489              	.LVL17:
 490              		.loc 1 288 1 is_stmt 0 view .LVU137
 491 0000 08B5     		push	{r3, lr}
 492              		.save {r3, lr}
 493              	.LCFI8:
 494              		.cfi_def_cfa_offset 8
 495              		.cfi_offset 3, -8
 496              		.cfi_offset 14, -4
 497              	.LVL18:
 498              	.L17:
 289:Src/main.cpp  ****   /* USER CODE BEGIN 5 */
 290:Src/main.cpp  ****   /* Infinite loop */
 291:Src/main.cpp  ****   for (;;)
 499              		.loc 1 291 3 is_stmt 1 discriminator 1 view .LVU138
 292:Src/main.cpp  ****   {
 293:Src/main.cpp  ****     osDelay(1);
 500              		.loc 1 293 5 discriminator 1 view .LVU139
 501              		.loc 1 293 12 is_stmt 0 discriminator 1 view .LVU140
 502 0002 0120     		movs	r0, #1
 503 0004 FFF7FEFF 		bl	osDelay
 504              	.LVL19:
 291:Src/main.cpp  ****   {
 505              		.loc 1 291 3 is_stmt 1 discriminator 1 view .LVU141
 506 0008 FBE7     		b	.L17
 507              		.cfi_endproc
 508              	.LFE139:
 509              		.fnend
 511              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 512              		.align	1
 513              		.global	HAL_TIM_PeriodElapsedCallback
 514              		.syntax unified
 515              		.thumb
 516              		.thumb_func
 517              		.fpu fpv4-sp-d16
 519              	HAL_TIM_PeriodElapsedCallback:
 520              		.fnstart
 521              	.LVL20:
 522              	.LFB140:
 294:Src/main.cpp  ****   }
 295:Src/main.cpp  ****   /* USER CODE END 5 */
 296:Src/main.cpp  **** }
 297:Src/main.cpp  **** 
 298:Src/main.cpp  **** /**
 299:Src/main.cpp  ****   * @brief  Period elapsed callback in non blocking mode
 300:Src/main.cpp  ****   * @note   This function is called  when TIM17 interrupt took place, inside
 301:Src/main.cpp  ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 302:Src/main.cpp  ****   * a global variable "uwTick" used as application time base.
 303:Src/main.cpp  ****   * @param  htim : TIM handle
ARM GAS  /tmp/cceeXmIr.s 			page 17


 304:Src/main.cpp  ****   * @retval None
 305:Src/main.cpp  ****   */
 306:Src/main.cpp  **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 307:Src/main.cpp  **** {
 523              		.loc 1 307 1 view -0
 524              		.cfi_startproc
 525              		@ args = 0, pretend = 0, frame = 0
 526              		@ frame_needed = 0, uses_anonymous_args = 0
 527              		.loc 1 307 1 is_stmt 0 view .LVU143
 528 0000 08B5     		push	{r3, lr}
 529              		.save {r3, lr}
 530              	.LCFI9:
 531              		.cfi_def_cfa_offset 8
 532              		.cfi_offset 3, -8
 533              		.cfi_offset 14, -4
 308:Src/main.cpp  ****   /* USER CODE BEGIN Callback 0 */
 309:Src/main.cpp  **** 
 310:Src/main.cpp  ****   /* USER CODE END Callback 0 */
 311:Src/main.cpp  ****   if (htim->Instance == TIM17)
 534              		.loc 1 311 3 is_stmt 1 view .LVU144
 535              		.loc 1 311 13 is_stmt 0 view .LVU145
 536 0002 0268     		ldr	r2, [r0]
 537              		.loc 1 311 3 view .LVU146
 538 0004 034B     		ldr	r3, .L23
 539 0006 9A42     		cmp	r2, r3
 540 0008 00D0     		beq	.L22
 541              	.LVL21:
 542              	.L19:
 312:Src/main.cpp  ****   {
 313:Src/main.cpp  ****     HAL_IncTick();
 314:Src/main.cpp  ****   }
 315:Src/main.cpp  ****   /* USER CODE BEGIN Callback 1 */
 316:Src/main.cpp  **** 
 317:Src/main.cpp  ****   /* USER CODE END Callback 1 */
 318:Src/main.cpp  **** }
 543              		.loc 1 318 1 view .LVU147
 544 000a 08BD     		pop	{r3, pc}
 545              	.LVL22:
 546              	.L22:
 313:Src/main.cpp  ****   }
 547              		.loc 1 313 5 is_stmt 1 view .LVU148
 313:Src/main.cpp  ****   }
 548              		.loc 1 313 16 is_stmt 0 view .LVU149
 549 000c FFF7FEFF 		bl	HAL_IncTick
 550              	.LVL23:
 551              		.loc 1 318 1 view .LVU150
 552 0010 FBE7     		b	.L19
 553              	.L24:
 554 0012 00BF     		.align	2
 555              	.L23:
 556 0014 00480140 		.word	1073825792
 557              		.cfi_endproc
 558              	.LFE140:
 559              		.fnend
 561              		.section	.text.Error_Handler,"ax",%progbits
 562              		.align	1
 563              		.global	Error_Handler
ARM GAS  /tmp/cceeXmIr.s 			page 18


 564              		.syntax unified
 565              		.thumb
 566              		.thumb_func
 567              		.fpu fpv4-sp-d16
 569              	Error_Handler:
 570              		.fnstart
 571              	.LFB141:
 319:Src/main.cpp  **** 
 320:Src/main.cpp  **** /**
 321:Src/main.cpp  ****   * @brief  This function is executed in case of error occurrence.
 322:Src/main.cpp  ****   * @retval None
 323:Src/main.cpp  ****   */
 324:Src/main.cpp  **** void Error_Handler(void)
 325:Src/main.cpp  **** {
 572              		.loc 1 325 1 is_stmt 1 view -0
 573              		.cfi_startproc
 574              		@ args = 0, pretend = 0, frame = 0
 575              		@ frame_needed = 0, uses_anonymous_args = 0
 576              		@ link register save eliminated.
 326:Src/main.cpp  ****   /* USER CODE BEGIN Error_Handler_Debug */
 327:Src/main.cpp  ****   /* User can add his own implementation to report the HAL error return state */
 328:Src/main.cpp  **** 
 329:Src/main.cpp  ****   /* USER CODE END Error_Handler_Debug */
 330:Src/main.cpp  **** }
 577              		.loc 1 330 1 is_stmt 0 view .LVU152
 578 0000 7047     		bx	lr
 579              		.cfi_endproc
 580              	.LFE141:
 581              		.cantunwind
 582              		.fnend
 584              		.global	defaultTaskHandle
 585              		.global	huart2
 586              		.section	.bss._ZZ4mainE6msgBuf,"aw",%nobits
 587              		.align	2
 588              		.set	.LANCHOR1,. + 0
 591              	_ZZ4mainE6msgBuf:
 592 0000 00000000 		.space	80
 592      00000000 
 592      00000000 
 592      00000000 
 592      00000000 
 593              		.section	.bss.defaultTaskHandle,"aw",%nobits
 594              		.align	2
 597              	defaultTaskHandle:
 598 0000 00000000 		.space	4
 599              		.section	.bss.huart2,"aw",%nobits
 600              		.align	2
 601              		.set	.LANCHOR0,. + 0
 604              	huart2:
 605 0000 00000000 		.space	128
 605      00000000 
 605      00000000 
 605      00000000 
 605      00000000 
 606              		.text
 607              	.Letext0:
 608              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
ARM GAS  /tmp/cceeXmIr.s 			page 19


 609              		.file 3 "Drivers/CMSIS/Include/core_cm4.h"
 610              		.file 4 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/system_stm32f3xx.h"
 611              		.file 5 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xe.h"
 612              		.file 6 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f3xx.h"
 613              		.file 7 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 614              		.file 8 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
 615              		.file 9 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
 616              		.file 10 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
 617              		.file 11 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
 618              		.file 12 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
 619              		.file 13 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
 620              		.file 14 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
 621              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
 622              		.file 16 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 623              		.file 17 "/usr/include/newlib/sys/_types.h"
 624              		.file 18 "/usr/include/newlib/sys/reent.h"
 625              		.file 19 "/usr/include/newlib/sys/lock.h"
 626              		.file 20 "/usr/include/newlib/string.h"
ARM GAS  /tmp/cceeXmIr.s 			page 20


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.cpp
     /tmp/cceeXmIr.s:18     .text._ZL12MX_GPIO_Initv:0000000000000000 $t
     /tmp/cceeXmIr.s:25     .text._ZL12MX_GPIO_Initv:0000000000000000 _ZL12MX_GPIO_Initv
     /tmp/cceeXmIr.s:161    .text._ZL12MX_GPIO_Initv:0000000000000094 $d
.ARM.exidx.text._ZL12MX_GPIO_Initv:0000000000000000 $d
     /tmp/cceeXmIr.s:169    .text._ZL19MX_USART2_UART_Initv:0000000000000000 $t
     /tmp/cceeXmIr.s:175    .text._ZL19MX_USART2_UART_Initv:0000000000000000 _ZL19MX_USART2_UART_Initv
     /tmp/cceeXmIr.s:232    .text._ZL19MX_USART2_UART_Initv:0000000000000028 $d
.ARM.extab.text._ZL19MX_USART2_UART_Initv:0000000000000000 $d
.ARM.exidx.text._ZL19MX_USART2_UART_Initv:0000000000000000 $d
     /tmp/cceeXmIr.s:239    .text._Z18SystemClock_Configv:0000000000000000 $t
     /tmp/cceeXmIr.s:246    .text._Z18SystemClock_Configv:0000000000000000 _Z18SystemClock_Configv
.ARM.exidx.text._Z18SystemClock_Configv:0000000000000000 $d
     /tmp/cceeXmIr.s:360    .rodata.main.str1.4:0000000000000000 $d
     /tmp/cceeXmIr.s:367    .text.main:0000000000000000 $t
     /tmp/cceeXmIr.s:374    .text.main:0000000000000000 main
     /tmp/cceeXmIr.s:466    .text.main:0000000000000070 $d
             .ARM.exidx.text.main:0000000000000000 $d
     /tmp/cceeXmIr.s:475    .text._Z16StartDefaultTaskPv:0000000000000000 $t
     /tmp/cceeXmIr.s:482    .text._Z16StartDefaultTaskPv:0000000000000000 _Z16StartDefaultTaskPv
.ARM.extab.text._Z16StartDefaultTaskPv:0000000000000000 $d
.ARM.exidx.text._Z16StartDefaultTaskPv:0000000000000000 $d
     /tmp/cceeXmIr.s:512    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/cceeXmIr.s:519    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cceeXmIr.s:556    .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
.ARM.extab.text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $d
.ARM.exidx.text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $d
     /tmp/cceeXmIr.s:562    .text.Error_Handler:0000000000000000 $t
     /tmp/cceeXmIr.s:569    .text.Error_Handler:0000000000000000 Error_Handler
    .ARM.exidx.text.Error_Handler:0000000000000000 $d
     /tmp/cceeXmIr.s:597    .bss.defaultTaskHandle:0000000000000000 defaultTaskHandle
     /tmp/cceeXmIr.s:604    .bss.huart2:0000000000000000 huart2
     /tmp/cceeXmIr.s:587    .bss._ZZ4mainE6msgBuf:0000000000000000 $d
     /tmp/cceeXmIr.s:591    .bss._ZZ4mainE6msgBuf:0000000000000000 _ZZ4mainE6msgBuf
     /tmp/cceeXmIr.s:594    .bss.defaultTaskHandle:0000000000000000 $d
     /tmp/cceeXmIr.s:600    .bss.huart2:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
__aeabi_unwind_cpp_pr0
HAL_UART_Init
__aeabi_unwind_cpp_pr1
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
strlen
HAL_UART_Transmit
HAL_Delay
osDelay
HAL_IncTick
